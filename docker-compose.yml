version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./data.csv:/docker-entrypoint-initdb.d/data.csv
      - ./01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./02-init.sh:/docker-entrypoint-initdb.d/02-init.sh
    networks:
      - app_network

    # Ajouter un healthcheck pour vérifier si PostgreSQL est prêt
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}", "-h", "localhost"]
      interval: 300s  # Vérification toutes les 10 secondes
      retries: 5     # Essayer 5 fois avant de considérer que la base de données est prête
      timeout: 300s    # Temps d'attente pour chaque test de connexion

  node-app:
    build: .
    container_name: node_server
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db  # Connexion au service db via le nom du service
      - POSTGRES_PORT=5432
    ports:
      - "3000:3000"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      db:
        condition: service_healthy  # Attendre que le service db soit healthy
    networks:
      - app_network
    command: ["node", "server.js"]

volumes:
  db_data:

networks:
  app_network:
    driver: bridge
